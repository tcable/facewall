apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'java'
//apply plugin: 'heroku'
apply plugin: 'application'

buildscript {
    repositories {
        maven { url "http://jcenter.bintray.com/" }
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0'
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "http://m2.neo4j.org/content/repositories/releases/" }
        maven { url "http://mvnrepository.com" }
        maven { url "http://m2.neo4j.org/content/groups/public" }
    }
}

idea {
    project {
        jdkName = '1.7'
        languageLevel = '1.7'
        ipr.withXml { provider -> provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git' }
    }

    module {
        downloadSources = true
    }
}

dependencies {

    // start Embedded Tomcat dependencies
    def tomcatVersion = '7.0.50'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
        "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
    // end Embedded Tomcat dependencies

    def neo4jversion = '2.1.6'
//    compile "org.neo4j:neo4j-rest-graphdb:1.9"
    compile "org.neo4j:neo4j-jdbc:2.1.4"
    compile "org.neo4j:neo4j-kernel:${neo4jversion}"

    compile "org.freemarker:freemarker:2.3.20"

    compile "org.glassfish.jersey.core:jersey-server:2.5.1"
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.5.1'
    compile 'org.glassfish.jersey.ext:jersey-mvc:2.5.1'

    compile 'org.apache.commons:commons-io:1.3.2'

    // begin Hibernate Validator dependencies
    compile 'org.hibernate:hibernate-validator:5.1.0.CR1'
    compile 'org.hibernate:hibernate-validator-annotation-processor:5.0.3.Final'
    compile 'javax.el:javax.el-api:2.2.4'
    compile 'org.glassfish.web:javax.el:2.2.4'
    // end Hibernate Validator dependencies

    def slf4jVersion = "1.7.4"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
//    compile "ch.qos.logback:logback-core:1.0.12"
//    compile "ch.qos.logback:logback-classic:1.0.12"

    testCompile "junit:junit:4.11"
    testCompile "org.hamcrest:hamcrest-all:1.1"
    testCompile "org.mockito:mockito-all:1.9.5"

    testCompile "org.neo4j:neo4j-kernel:${neo4jversion}:tests"
    testCompile "org.neo4j.app:neo4j-server:${neo4jversion}"
    testCompile "org.neo4j.app:neo4j-server:${neo4jversion}:static-web"

    testCompile project(':facewall-database-utils')
}

tomcatRunWar {
        httpPort = 9000
}

task ('tomcatDaemonRunWar', type: org.gradle.api.plugins.tomcat.TomcatRunWar, description: 'Only used as part of the task integration') {
    httpPort = 9001
    daemon = true
   // tasks[':functional-tests:integration'].execute()
}

war {
    archiveName = "facewall.war"
    from 'public'
}

task ('facewallDeploy', type: Exec, dependsOn:['war'], ) {
    commandLine 'java' //-jar webapp-runner-7.0.22.jar --port 9000 ./build/libs/facewall.war'
    args = ['-jar', 'webapp-runner-7.0.22.jar', '--port', '9000', 'build/libs/facewall.war']
}
//task('checkDatabase', type:Exec) {
//    ignoreExitValue = true
//
//    //on windows:
//    commandLine 'cmd', '/c', 'neo4j', 'status'
//
//    //store the output instead of printing to the console:
//    standardOutput = new ByteArrayOutputStream()
//
//    //extension method checkDatabase.output() can be used to obtain the output:
//    ext.output = {
//        return (standardOutput.toString() + "***")
//    }
//
//    //check the output
//    if (standardOutput.toString().contains("RUNNING")) {
//        println "pass"
//    } else {
//        println "fail"
//    }
//}

//task print (dependsOn: ['checkDatabase']) {
//    println ("***" + standardOutput.toString() + "***")
//}

//task('hello', dependsOn: ['checkDatabase']) << {
//    //println "hello"
//    println tasks.checkDatabase.output
//}


private boolean dbRunning() {
    // on linux
    Process p = "neo4j status".execute()
    BufferedReader reader = new BufferedReader(new InputStreamReader(p.inputStream))
    String line
    while ((line = reader.readLine()) != null) {
        println line
    }
    int exitCode = p.waitFor()

    if (exitCode == 0) {
        return true
    } else if (exitCode == 3) {
        return false
    } else {
        throw new Exception("Unexpected exit code from command '$command' was $exitCode")
    }
}


task ('checkDb', description:'Checks whether or not the database is running.') << {
    dbRunning()
}

task ('startDb', description:'Starts the database. If already running restarts the database.') << {
    Process p
    if (dbRunning()) {
        // restart
        p = "neo4j restart".execute()
    } else {
        // start
        p = "neo4j start".execute()
    }
    BufferedReader reader = new BufferedReader(new InputStreamReader(p.inputStream))
    String line
    while ((line = reader.readLine()) != null) {
        println line
    }
}

task ('stopDb', description:'Stops the database.') << {
    Process p
    if (dbRunning()) {
        //stop
        p = "neo4j stop".execute()
        BufferedReader reader = new BufferedReader(new InputStreamReader(p.inputStream))
        String line
        while ((line = reader.readLine()) != null) {
            println line
        }
    }
}

task ('startPopDb', dependsOn:['startDb',':functional-tests:defaultSchema'],description: 'Starts the database. If already running restarts the database. (gradle startDb) Then populates the database with the default schema.') << {
    //dependsOn 'startDb',':functional-tests:defaultSchema'
}

task ('stage', dependsOn: ['war']) << {
    println "Running stage"
}
//
//heroku {
//
//    apiKey = 'my-api-key'
//}
mainClassName = "facewall"
applicationName = "facewall"